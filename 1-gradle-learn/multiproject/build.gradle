plugins {
    id 'java'
}

group 'com.heller.gradle'
version '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// gradle -q hello
allprojects {
    task hello {
        doLast { task ->
            println "I'm $task.project.name"
        }
    }
}


// gradle -q hello
subprojects {
    hello {
        doLast {
            println "- I a subproject"
        }
    }
}

// gradle -q hello
// 不过真实项目中一般不会这么做，而是在子工程中创建一个 build.gradle 的脚本文件，在其中实现特定子工程的配置。
project(':game').hello {
    doLast {
        println "- $project.name, I'm the specific project."
    }
}

// gradle -q hello
// configure方法接受一个列表作为参数，然后可以把配置项应用到列表中的工程中
configure(subprojects.findAll {it.name == 'core'}) {
    hello {
        doLast {
            println "- $project.name, I'm the configured project."
        }
    }
}


subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
    dependencies {
        testCompile "junit:junit:4.12"
    }
}

// 为所有工程定义公共配置
allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    // 设置 JDK 版本
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // 设置编译使用utf-8编码
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Test) {
        systemProperty "file.encoding", "UTF-8"
    }

    // 使用远程仓库，
    repositories {
        mavenCentral()
    }

    // 使用了自定义的仓库，比如公司的nexus私服
/*
    repositories {
       maven {
            url "http://192.168.99.90:8081/nexus/content/groups/public/"
        }
    }
*/

    // 定义了公共的依赖库
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

}
